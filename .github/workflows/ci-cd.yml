name: CI/CD Pipeline - Rakshaayan Platform

on:
  push:
    branches: [ main, dev, staging ]
  pull_request:
    branches: [ main, dev, staging ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test Backend Services
  test-backend:
    name: Test Backend Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth_service, patient_service, hospital_service, manufacturer_service, gov_service, coordinator_service, media_service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd services/${{ matrix.service }}
        pip install -r requirements.txt
    
    - name: Run linting
      run: |
        cd services/${{ matrix.service }}
        pip install flake8 black mypy
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Linting issues found but continuing..."
        black . --check || echo "Code formatting issues found but continuing..."
        mypy . --ignore-missing-imports || echo "Type checking issues found but continuing..."
    
    - name: Run tests
      env:
        SECRET_KEY: test-secret-key
        DEBUG: True
        ALLOWED_HOSTS: localhost,127.0.0.1
        POSTGRES_DB: test_db
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_password
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        JWT_SECRET_KEY: test-jwt-secret
        ACCESS_TOKEN_LIFETIME: 15
        REFRESH_TOKEN_LIFETIME: 10080
        EMAIL_BACKEND: django.core.mail.backends.console.EmailBackend
        EMAIL_HOST: localhost
        EMAIL_PORT: 587
        EMAIL_USE_TLS: True
        EMAIL_HOST_USER: test@example.com
        EMAIL_HOST_PASSWORD: test_password
        DATABASE_URL: sqlite:///test.db
      run: |
        cd services/${{ matrix.service }}
        python manage.py test --verbosity=2 || echo "Tests failed but continuing for initial setup..."

  # Test AI Service
  test-ai-service:
    name: Test AI Service
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd services/ai_service
        pip install -r requirements.txt
    
    - name: Run linting
      run: |
        cd services/ai_service
        pip install flake8 black mypy
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Linting issues found but continuing..."
        black . --check || echo "Code formatting issues found but continuing..."
        mypy . --ignore-missing-imports || echo "Type checking issues found but continuing..."
    
    - name: Run tests
      env:
        SECRET_KEY: test-secret-key
        DEBUG: True
        ALLOWED_HOSTS: localhost,127.0.0.1
        POSTGRES_DB: test_db
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_password
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
      run: |
        cd services/ai_service
        pytest tests/ -v || echo "Tests failed but continuing for initial setup..."

  # Test Frontend
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run linting
      run: |
        cd frontend
        npm run lint || echo "Linting issues found but continuing..."
    
    - name: Run type checking
      run: |
        cd frontend
        npm run type-check || echo "Type checking issues found but continuing..."
    
    - name: Run tests
      run: |
        cd frontend
        npm test -- --coverage || echo "Tests failed but continuing for initial setup..."

  # Build and Test Docker Images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-ai-service, test-frontend]
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      if: github.event_name != 'pull_request'
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push auth service
      uses: docker/build-push-action@v5
      with:
        context: ./services/auth_service
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/auth-service:${{ github.sha }}
    
    - name: Build and push patient service
      uses: docker/build-push-action@v5
      with:
        context: ./services/patient_service
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/patient-service:${{ github.sha }}
    
    - name: Build and push hospital service
      uses: docker/build-push-action@v5
      with:
        context: ./services/hospital_service
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/hospital-service:${{ github.sha }}
    
    - name: Build and push manufacturer service
      uses: docker/build-push-action@v5
      with:
        context: ./services/manufacturer_service
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/manufacturer-service:${{ github.sha }}
    
    - name: Build and push gov service
      uses: docker/build-push-action@v5
      with:
        context: ./services/gov_service
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/gov-service:${{ github.sha }}
    
    - name: Build and push coordinator service
      uses: docker/build-push-action@v5
      with:
        context: ./services/coordinator_service
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/coordinator-service:${{ github.sha }}
    
    - name: Build and push media service
      uses: docker/build-push-action@v5
      with:
        context: ./services/media_service
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/media-service:${{ github.sha }}
    
    - name: Build and push AI service
      uses: docker/build-push-action@v5
      with:
        context: ./services/ai_service
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ai-service:${{ github.sha }}
    
    - name: Build and push frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Code Quality Check
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarqube-quality-gate-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        scannerHome: ${{ github.workspace }}/.sonar/scanner
        args: >
          -Dsonar.projectKey=rakshaayanplatform_mvpi-regulatory-platform
          -Dsonar.sources=.
          -Dsonar.host.url=https://sonarcloud.io
          -Dsonar.organization=rakshaayanplatform
          -Dsonar.qualitygate.wait=true
          -Dsonar.qualitygate.timeout=300
      continue-on-error: true

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker, security-scan, code-quality]
    if: github.ref == 'refs/heads/dev'
    
    steps:
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add staging deployment logic here

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker, security-scan, code-quality]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add production deployment logic here 