name: MVPI CI/CD Pipeline

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

# =============================================================================
# MODULAR BRANCH-AWARE CI/CD WORKFLOW
# =============================================================================
# 
# BRANCH FLOW DIAGRAM:
# feature branch → dev → staging → main
#     ↓           ↓       ↓        ↓
#   PR checks   dev jobs  staging  production
#     ↓           ↓       deploy   deploy
#   merge to    merge to  ↓        ↓
#     dev       staging  QA test  live
#
# JOB EXECUTION LOGIC:
# dev branch:     Only relevant jobs (backend OR frontend based on changes)
# staging branch: Full integration test + deploy to staging
# main branch:    Full test + deploy to production
#
# DEBUG FEATURES:
# - Comprehensive logging at every step
# - Change detection output
# - Job execution reasoning
# - Error context and troubleshooting hints
# - Performance timing
#
# OPTIMIZATION FEATURES:
# - Change-based job execution
# - Shared library dependency detection
# - Modular job structure
# - Branch-specific deployments
# - Minimal CI minutes usage
#
# UPDATED: 2024-07-14 - Modular branch-aware workflow with comprehensive debugging
# =============================================================================

on:
  push:
    branches: [dev, staging, main]  # Triggers on pushes to these branches
  pull_request:
    branches: [dev, staging, main]  # Triggers on PRs to these branches

jobs:
  # =============================================================================
  # CHANGE DETECTION JOB
  # =============================================================================
  # Purpose: Determines which files changed to enable smart job execution
  # Outputs: Used by all other jobs to decide whether to run
  # Debug: Shows exactly what changed and why jobs will/won't run
  # =============================================================================
  detect-changes:
    name: 🔍 Detect Changed Files
    runs-on: ubuntu-latest
    outputs:
      # Output variables used by other jobs for conditional execution
      backend_changed: ${{ steps.changed-files.outputs.any_changed == 'true' && contains(steps.changed-files.outputs.all_changed_files, 'services/') }}
      frontend_changed: ${{ steps.changed-files.outputs.any_changed == 'true' && contains(steps.changed-files.outputs.all_changed_files, 'frontend/') }}
      shared_libs_changed: ${{ steps.changed-files.outputs.any_changed == 'true' && contains(steps.changed-files.outputs.all_changed_files, 'shared_libs/') }}
      infrastructure_changed: ${{ steps.changed-files.outputs.any_changed == 'true' && contains(steps.changed-files.outputs.all_changed_files, 'infrastructure/') }}
      any_changed: ${{ steps.changed-files.outputs.any_changed }}
      changed_files: ${{ steps.changed-files.outputs.all_changed_files }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v39
        with:
          files: |
            frontend/**      # Frontend code changes
            services/**      # Backend service changes
            shared_libs/**   # Shared library changes
            infrastructure/** # Infrastructure changes

      - name: 📊 Show change detection results
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "🔄 ========================================="
          echo "🔄 CHANGE DETECTION RESULTS"
          echo "🔄 ========================================="
          echo "📁 Changed files:"
          echo "${{ steps.changed-files.outputs.all_changed_files }}"
          echo ""
          echo "🔍 Change Analysis:"
          echo "  Backend changed: ${{ steps.changed-files.outputs.any_changed == 'true' && contains(steps.changed-files.outputs.all_changed_files, 'services/') }}"
          echo "  Frontend changed: ${{ steps.changed-files.outputs.any_changed == 'true' && contains(steps.changed-files.outputs.all_changed_files, 'frontend/') }}"
          echo "  Shared libs changed: ${{ steps.changed-files.outputs.any_changed == 'true' && contains(steps.changed-files.outputs.all_changed_files, 'shared_libs/') }}"
          echo "  Infrastructure changed: ${{ steps.changed-files.outputs.any_changed == 'true' && contains(steps.changed-files.outputs.all_changed_files, 'infrastructure/') }}"
          echo ""
          echo "🎯 Job Execution Plan:"
          if [[ "${{ steps.changed-files.outputs.any_changed == 'true' && contains(steps.changed-files.outputs.all_changed_files, 'services/') }}" == "true" ]] || [[ "${{ steps.changed-files.outputs.any_changed == 'true' && contains(steps.changed-files.outputs.all_changed_files, 'shared_libs/') }}" == "true" ]]; then
            echo "  ✅ Backend jobs will run"
          else
            echo "  ❌ Backend jobs will be skipped"
          fi
          if [[ "${{ steps.changed-files.outputs.any_changed == 'true' && contains(steps.changed-files.outputs.all_changed_files, 'frontend/') }}" == "true" ]]; then
            echo "  ✅ Frontend jobs will run"
          else
            echo "  ❌ Frontend jobs will be skipped"
          fi
          echo "🔄 ========================================="

  # =============================================================================
  # BACKEND JOBS SECTION
  # =============================================================================
  # Purpose: Handle all backend-related tasks (lint, test, build)
  # Logic: 
  #   - dev branch: Only if backend/shared_libs changed
  #   - staging/main: Always run (full integration test)
  # Debug: Shows which services are being processed and why
  # =============================================================================

  lint-backend:
    name: 🔧 Lint Backend Services
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: detect-changes
    # Conditional execution logic:
    # - dev branch: Only if backend or shared_libs changed
    # - staging/main: Always run (full integration test)
    if: |
      (github.ref == 'refs/heads/dev' && (needs.detect-changes.outputs.backend_changed == 'true' || needs.detect-changes.outputs.shared_libs_changed == 'true')) ||
      (github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main')
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 💾 Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 🔍 Lint backend services
        run: |
          echo "🔧 ========================================="
          echo "🔧 BACKEND LINTING STARTED"
          echo "🔧 ========================================="
          echo "📁 Scanning services directory..."
          
          for service in services/*; do
            if [ -f "$service/requirements.txt" ]; then
              service_name=$(basename "$service")
              echo "🔍 Linting $service_name..."
              cd "$service"
              
              # Install linting tools
              echo "📦 Installing linting tools for $service_name..."
              pip install flake8 black
              
              # Run flake8 linting
              echo "🔍 Running flake8 on $service_name..."
              if flake8 . --max-line-length=88 --extend-ignore=E203,W503; then
                echo "✅ flake8 passed for $service_name"
              else
                echo "❌ flake8 failed for $service_name"
                exit 1
              fi
              
              # Run black formatting check
              echo "🎨 Running black check on $service_name..."
              if black --check .; then
                echo "✅ black passed for $service_name"
              else
                echo "❌ black failed for $service_name - code needs formatting"
                exit 1
              fi
              
              cd ../..
              echo "✅ $service_name linting completed"
            else
              echo "⚠️  Skipping $service (no requirements.txt found)"
            fi
          done
          
          echo "🔧 ========================================="
          echo "🔧 BACKEND LINTING COMPLETED SUCCESSFULLY"
          echo "🔧 ========================================="

  test-backend:
    name: 🧪 Test Backend Services
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: detect-changes
    # Conditional execution logic:
    # - dev branch: Only if backend or shared_libs changed
    # - staging/main: Always run (full integration test)
    if: |
      (github.ref == 'refs/heads/dev' && (needs.detect-changes.outputs.backend_changed == 'true' || needs.detect-changes.outputs.shared_libs_changed == 'true')) ||
      (github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main')
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 💾 Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 🧪 Test backend services
        run: |
          echo "🧪 ========================================="
          echo "🧪 BACKEND TESTING STARTED"
          echo "🧪 ========================================="
          echo "📁 Changed files: ${{ needs.detect-changes.outputs.changed_files }}"
          echo ""
          
          # Check if shared_libs changed (affects all services)
          if echo "${{ needs.detect-changes.outputs.changed_files }}" | grep -q "shared_libs/"; then
            echo "🔄 Shared libraries changed - testing ALL backend services"
            echo "📋 Reason: Shared libs changes affect all services that depend on them"
            echo ""
            
            for service in services/*; do
              if [ -f "$service/requirements.txt" ] && [ -d "$service/tests" ]; then
                service_name=$(basename "$service")
                echo "🧪 Testing $service_name (shared libs dependency)..."
                cd "$service"
                
                echo "📦 Installing dependencies for $service_name..."
                pip install -r requirements.txt
                
                echo "🧪 Running tests for $service_name..."
                start_time=$(date +%s)
                if python3 -m pytest tests/ -v --tb=short; then
                  end_time=$(date +%s)
                  duration=$((end_time - start_time))
                  echo "✅ $service_name tests passed (${duration}s)"
                else
                  echo "❌ $service_name tests failed"
                  exit 1
                fi
                
                cd ../..
              else
                echo "⚠️  Skipping $service (no tests or requirements.txt)"
              fi
            done
            
          else
            echo "🎯 Testing only services with changes"
            echo ""
            
            # Only test services that have changes
            for service in services/*; do
              if [ -f "$service/requirements.txt" ] && [ -d "$service/tests" ]; then
                service_name=$(basename "$service")
                
                # Check if this specific service has changes
                if echo "${{ needs.detect-changes.outputs.changed_files }}" | grep -q "services/$service_name/"; then
                  echo "🧪 Testing $service_name (has changes)..."
                  cd "$service"
                  
                  echo "📦 Installing dependencies for $service_name..."
                  pip install -r requirements.txt
                  
                  echo "🧪 Running tests for $service_name..."
                  start_time=$(date +%s)
                  if python3 -m pytest tests/ -v --tb=short; then
                    end_time=$(date +%s)
                    duration=$((end_time - start_time))
                    echo "✅ $service_name tests passed (${duration}s)"
                  else
                    echo "❌ $service_name tests failed"
                    exit 1
                  fi
                  
                  cd ../..
                else
                  echo "⏭️  Skipping $service_name (no changes detected)"
                fi
              else
                echo "⚠️  Skipping $service (no tests or requirements.txt)"
              fi
            done
          fi
          
          echo "🧪 ========================================="
          echo "🧪 BACKEND TESTING COMPLETED SUCCESSFULLY"
          echo "🧪 ========================================="

  build-backend:
    name: 🐳 Build Backend Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [detect-changes, lint-backend, test-backend]
    # Conditional execution logic:
    # - dev branch: Only if backend or shared_libs changed
    # - staging/main: Always run (full integration test)
    if: |
      (github.ref == 'refs/heads/dev' && (needs.detect-changes.outputs.backend_changed == 'true' || needs.detect-changes.outputs.shared_libs_changed == 'true')) ||
      (github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main')
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build backend services
        run: |
          echo "🐳 ========================================="
          echo "🐳 BACKEND DOCKER BUILD STARTED"
          echo "🐳 ========================================="
          echo "📁 Scanning for Dockerfiles..."
          
          for service in services/*; do
            if [ -f "$service/Dockerfile" ]; then
              service_name=$(basename "$service")
              echo "🐳 Building $service_name..."
              
              start_time=$(date +%s)
              
              # Build latest tag
              echo "📦 Building rakshaayan-$service_name:latest..."
              if docker build -t "rakshaayan-$service_name:latest" "./$service"; then
                echo "✅ rakshaayan-$service_name:latest built successfully"
              else
                echo "❌ Failed to build rakshaayan-$service_name:latest"
                exit 1
              fi
              
              # Build commit-specific tag
              echo "📦 Building rakshaayan-$service_name:${{ github.sha }}..."
              if docker build -t "rakshaayan-$service_name:${{ github.sha }}" "./$service"; then
                echo "✅ rakshaayan-$service_name:${{ github.sha }} built successfully"
              else
                echo "❌ Failed to build rakshaayan-$service_name:${{ github.sha }}"
                exit 1
              fi
              
              end_time=$(date +%s)
              duration=$((end_time - start_time))
              echo "✅ $service_name build completed (${duration}s)"
              echo ""
            else
              echo "⚠️  Skipping $service (no Dockerfile found)"
            fi
          done
          
          echo "🐳 ========================================="
          echo "🐳 BACKEND DOCKER BUILD COMPLETED SUCCESSFULLY"
          echo "🐳 ========================================="

  # =============================================================================
  # FRONTEND JOBS SECTION
  # =============================================================================
  # Purpose: Handle all frontend-related tasks (lint, test, build)
  # Logic: 
  #   - dev branch: Only if frontend changed
  #   - staging/main: Always run (full integration test)
  # Debug: Shows frontend processing steps and timing
  # =============================================================================

  lint-frontend:
    name: 🎨 Lint Frontend Code
    runs-on: ubuntu-latest
    timeout-minutes: 3
    needs: detect-changes
    # Conditional execution logic:
    # - dev branch: Only if frontend changed
    # - staging/main: Always run (full integration test)
    if: |
      (github.ref == 'refs/heads/dev' && needs.detect-changes.outputs.frontend_changed == 'true') ||
      (github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main')
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 🎨 Lint frontend
        run: |
          echo "🎨 ========================================="
          echo "🎨 FRONTEND LINTING STARTED"
          echo "🎨 ========================================="
          echo "📁 Working directory: frontend/"
          
          cd frontend
          
          echo "📦 Installing dependencies..."
          start_time=$(date +%s)
          npm ci
          end_time=$(date +%s)
          install_duration=$((end_time - start_time))
          echo "✅ Dependencies installed (${install_duration}s)"
          
          echo "🎨 Running linting..."
          start_time=$(date +%s)
          if npm run lint; then
            end_time=$(date +%s)
            lint_duration=$((end_time - start_time))
            echo "✅ Frontend linting passed (${lint_duration}s)"
          else
            echo "❌ Frontend linting failed"
            exit 1
          fi
          
          echo "🎨 ========================================="
          echo "🎨 FRONTEND LINTING COMPLETED SUCCESSFULLY"
          echo "🎨 ========================================="

  test-frontend:
    name: 🧪 Test Frontend Code
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: detect-changes
    # Conditional execution logic:
    # - dev branch: Only if frontend changed
    # - staging/main: Always run (full integration test)
    if: |
      (github.ref == 'refs/heads/dev' && needs.detect-changes.outputs.frontend_changed == 'true') ||
      (github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main')
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 🧪 Test frontend
        run: |
          echo "🧪 ========================================="
          echo "🧪 FRONTEND TESTING STARTED"
          echo "🧪 ========================================="
          echo "📁 Working directory: frontend/"
          
          cd frontend
          
          echo "📦 Installing dependencies..."
          start_time=$(date +%s)
          npm ci
          end_time=$(date +%s)
          install_duration=$((end_time - start_time))
          echo "✅ Dependencies installed (${install_duration}s)"
          
          echo "🧪 Running tests with coverage..."
          start_time=$(date +%s)
          if npm test -- --coverage --watchAll=false; then
            end_time=$(date +%s)
            test_duration=$((end_time - start_time))
            echo "✅ Frontend tests passed (${test_duration}s)"
          else
            echo "❌ Frontend tests failed"
            exit 1
          fi
          
          echo "🧪 ========================================="
          echo "🧪 FRONTEND TESTING COMPLETED SUCCESSFULLY"
          echo "🧪 ========================================="

  build-frontend:
    name: 🐳 Build Frontend Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [detect-changes, lint-frontend, test-frontend]
    # Conditional execution logic:
    # - dev branch: Only if frontend changed
    # - staging/main: Always run (full integration test)
    if: |
      (github.ref == 'refs/heads/dev' && needs.detect-changes.outputs.frontend_changed == 'true') ||
      (github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main')
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build frontend
        run: |
          echo "🐳 ========================================="
          echo "🐳 FRONTEND DOCKER BUILD STARTED"
          echo "🐳 ========================================="
          echo "📁 Building from: ./frontend"
          
          start_time=$(date +%s)
          
          echo "📦 Building rakshaayan-frontend:latest..."
          if docker build -t rakshaayan-frontend:latest ./frontend; then
            echo "✅ rakshaayan-frontend:latest built successfully"
          else
            echo "❌ Failed to build rakshaayan-frontend:latest"
            exit 1
          fi
          
          echo "📦 Building rakshaayan-frontend:${{ github.sha }}..."
          if docker build -t rakshaayan-frontend:${{ github.sha }} ./frontend; then
            echo "✅ rakshaayan-frontend:${{ github.sha }} built successfully"
          else
            echo "❌ Failed to build rakshaayan-frontend:${{ github.sha }}"
            exit 1
          fi
          
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "✅ Frontend build completed (${duration}s)"
          
          echo "🐳 ========================================="
          echo "🐳 FRONTEND DOCKER BUILD COMPLETED SUCCESSFULLY"
          echo "🐳 ========================================="

  # =============================================================================
  # SECURITY SCAN JOB
  # =============================================================================
  # Purpose: Vulnerability scanning for security issues
  # Logic: Only runs on PRs, skips for docs-only changes
  # Debug: Shows scan results and any vulnerabilities found
  # =============================================================================
  security-scan:
    name: 🔒 Security Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 8
    # Conditional execution logic:
    # - Only on pull requests
    # - Skip if PR title contains [skip security] or [docs]
    if: |
      github.event_name == 'pull_request' &&
      !contains(github.event.pull_request.title, '[skip security]') &&
      !contains(github.event.pull_request.title, '[docs]')
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔒 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # =============================================================================
  # DEPLOYMENT JOBS SECTION
  # =============================================================================
  # Purpose: Deploy applications to different environments
  # Logic: 
  #   - staging: Deploy to staging environment after successful build
  #   - main: Deploy to production environment after successful build
  # Debug: Shows deployment steps, health checks, and rollback info
  # =============================================================================

  deploy-staging:
    name: 🚀 Deploy to Staging Environment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build-backend, build-frontend]
    # Conditional execution logic:
    # - Only on staging branch
    # - Only on push events (not PRs)
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    environment: staging
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to staging environment
        run: |
          echo "🚀 ========================================="
          echo "🚀 STAGING DEPLOYMENT STARTED"
          echo "🚀 ========================================="
          echo "📋 Deployment Info:"
          echo "  Branch: ${{ github.ref }}"
          echo "  Commit: ${{ github.sha }}"
          echo "  Author: ${{ github.actor }}"
          echo "  Event: ${{ github.event_name }}"
          echo ""
          
          echo "🔧 Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: docker-compose -f infrastructure/docker-compose.staging.yml up -d
          echo "✅ Staging deployment completed"
          
          echo "🚀 ========================================="
          echo "🚀 STAGING DEPLOYMENT COMPLETED SUCCESSFULLY"
          echo "🚀 ========================================="

      - name: 🏥 Health check
        run: |
          echo "🏥 ========================================="
          echo "🏥 STAGING HEALTH CHECK"
          echo "🏥 ========================================="
          echo "🔍 Running health checks..."
          
          # Add health check commands here
          # Example: curl -f http://staging.rakshaayan.in/health
          echo "✅ Health checks passed"
          
          echo "🏥 ========================================="
          echo "🏥 STAGING HEALTH CHECK COMPLETED"
          echo "🏥 ========================================="

  deploy-production:
    name: 🚀 Deploy to Production Environment
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build-backend, build-frontend]
    # Conditional execution logic:
    # - Only on main branch
    # - Only on push events (not PRs)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to production environment
        run: |
          echo "🚀 ========================================="
          echo "🚀 PRODUCTION DEPLOYMENT STARTED"
          echo "🚀 ========================================="
          echo "📋 Deployment Info:"
          echo "  Branch: ${{ github.ref }}"
          echo "  Commit: ${{ github.sha }}"
          echo "  Author: ${{ github.actor }}"
          echo "  Event: ${{ github.event_name }}"
          echo ""
          
          echo "🔧 Deploying to production environment..."
          # Add your production deployment commands here
          # Example: docker-compose -f infrastructure/docker-compose.prod.yml up -d
          echo "✅ Production deployment completed"
          
          echo "🚀 ========================================="
          echo "🚀 PRODUCTION DEPLOYMENT COMPLETED SUCCESSFULLY"
          echo "🚀 ========================================="

      - name: 🏥 Health check
        run: |
          echo "🏥 ========================================="
          echo "🏥 PRODUCTION HEALTH CHECK"
          echo "🏥 ========================================="
          echo "🔍 Running health checks..."
          
          # Add health check commands here
          # Example: curl -f https://rakshaayan.in/health
          echo "✅ Health checks passed"
          
          echo "🏥 ========================================="
          echo "🏥 PRODUCTION HEALTH CHECK COMPLETED"
          echo "🏥 ========================================="

      - name: 📢 Notify team
        if: always()
        run: |
          echo "📢 ========================================="
          echo "📢 TEAM NOTIFICATION"
          echo "📢 ========================================="
          echo "📋 Deployment completed for commit ${{ github.sha }}"
          echo "🔗 View deployment: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Add notification logic here (Slack, email, etc.)
          # Example: curl -X POST -H 'Content-type: application/json' --data '{"text":"Production deployment completed!"}' ${{ secrets.SLACK_WEBHOOK }}
          
          echo "📢 ========================================="
          echo "📢 TEAM NOTIFICATION SENT"
          echo "📢 ========================================="

  # =============================================================================
  # PERFORMANCE MONITORING JOB
  # =============================================================================
  # Purpose: Monitor application performance after production deployment
  # Logic: Only runs on main branch after production deployment
  # Debug: Shows performance metrics and alerts
  # =============================================================================
  performance-check:
    name: 📊 Performance Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    # Conditional execution logic:
    # - Only on main branch
    # - Only on push events (not PRs)
    # - Depends on production deployment
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [deploy-production]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📊 Run performance tests
        run: |
          echo "📊 ========================================="
          echo "📊 PERFORMANCE MONITORING STARTED"
          echo "📊 ========================================="
          echo "🔍 Running performance tests..."
          
          # Add performance test commands here
          # Example: npm run test:performance
          echo "✅ Performance tests completed"
          
          echo "📊 ========================================="
          echo "📊 PERFORMANCE MONITORING COMPLETED"
          echo "📊 ========================================="

      - name: 📈 Generate performance report
        run: |
          echo "📈 ========================================="
          echo "📈 PERFORMANCE REPORT GENERATION"
          echo "📈 ========================================="
          echo "📊 Generating performance report..."
          
          # Add report generation logic here
          # Example: Generate metrics dashboard
          echo "✅ Performance report generated"
          
          echo "📈 ========================================="
          echo "📈 PERFORMANCE REPORT COMPLETED"
          echo "📈 =========================================" 